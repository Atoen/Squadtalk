@using System.Threading
@using Microsoft.AspNetCore.Components.Rendering;
@using Microsoft.JSInterop
@using Squadtalk.Client.Extensions
@using Squadtalk.Client.Models
@using Squadtalk.Client.Services

@if (_enumerationCompleted)
{
    <div>No more messages</div>
}

@if (IsLoading)
{
    @LoadingTemplate
}

@* ReSharper disable once CSharpWarnings::CS8974 *@
@RenderLastElement

@if (ItemTemplate is not null)
{
    foreach (var item in MessageService.Messages)
    {
        <div @key="item">
            @ItemTemplate(item)
        </div>
    }
}

@inject IJSRuntime JsRuntime
@implements IAsyncDisposable
@inject MessageService MessageService

@code {

    private ElementReference _lastItemIndicator;
    private DotNetObjectReference<InfiniteScrolling>? _currentComponentReference;
    private IJSObjectReference? _module;
    private IJSObjectReference? _autoScrollModule;
    private IJSObjectReference? _instance;
    private bool _enumerationCompleted;

    private CancellationTokenSource? _loadItemsTokenSource;

    private bool IsLoading => _loadItemsTokenSource != null;
    
    [Parameter] public RenderFragment<MessageModel>? ItemTemplate { get; set; }
    [Parameter] public RenderFragment? LoadingTemplate { get; set; }
    [Parameter] public string LastItemIndicatorElement { get; set; } = "div";

    protected override void OnInitialized()
    {
        MessageService.MessageReceived += UpdateOnMessage;
    }

    private async Task UpdateOnMessage()
    {
        StateHasChanged();
        await _autoScrollModule!.InvokeVoidAsync("scrollToBottom");
    }

    [JSInvokable]
    public async Task LoadMoreItems()
    {
        if (_loadItemsTokenSource != null) return;
        
        var currentItems = MessageService.Messages;
        var cancellationTokenSource = new CancellationTokenSource();
        _loadItemsTokenSource = cancellationTokenSource;
        
        try
        {
            var newItems = await MessageService.GetMessagePageAsync();
            if (!cancellationTokenSource.IsCancellationRequested)
            {
                var length = currentItems.Count;
                currentItems.InsertRange(0, newItems);

                if (currentItems.Count == length)
                {
                    _enumerationCompleted = true;
                }
                else
                {
                    System.Diagnostics.Debug.Assert(_instance != null);
                    await _instance.InvokeVoidAsync("onNewItems", cancellationTokenSource.Token);
                }
            }
        }
        catch (OperationCanceledException e) when (e.CancellationToken == cancellationTokenSource.Token)
        {
        }
        finally
        {
            _loadItemsTokenSource = null;
            cancellationTokenSource.Dispose();
        }

        var scrollPosition = await _autoScrollModule!.InvokeAsync<double>("markScroll", CancellationToken.None);
        StateHasChanged();
        await _autoScrollModule!.InvokeVoidAsync("scrollToMark", CancellationToken.None, scrollPosition);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        
        _module = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./infinite-scrolling.js");
        _currentComponentReference = DotNetObjectReference.Create(this);
        _instance = await _module.InvokeAsync<IJSObjectReference>("initialize", _lastItemIndicator, _currentComponentReference);

        _autoScrollModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/Scroll.js");
        await _autoScrollModule.InvokeVoidAsync("initialize");
        await _autoScrollModule!.InvokeVoidAsync("scrollToMark", 0);
    }

    public async ValueTask DisposeAsync()
    {
        if (_loadItemsTokenSource is not null)
        {
            _loadItemsTokenSource.Dispose();
            _loadItemsTokenSource = null;
        }

        if (_instance is not null)
        {
            await _instance.InvokeVoidAsync("dispose");
            await _instance.DisposeAsync();
            _instance = null;
        }

        await _module.TryDisposeAsync();
        await _autoScrollModule.TryDisposeAsync();

        _currentComponentReference?.Dispose();
        
        MessageService.MessageReceived -= UpdateOnMessage;

    }

    private void RenderLastElement(RenderTreeBuilder builder)
    {
        builder.OpenElement(1000, LastItemIndicatorElement);
        var style = _enumerationCompleted ? "height:0;width:0" : "height:1px;width:1px;flex-shrink:0";
        builder.AddAttribute(1001, "style", style);
        builder.AddElementReferenceCapture(1002, element => _lastItemIndicator = element);
        builder.CloseElement();
    }
}