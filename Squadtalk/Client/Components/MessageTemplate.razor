@using Squadtalk.Client.Models
@using System.Diagnostics.CodeAnalysis
<div class="message-container">
    @if (Model.IsFirst)
    {
        <div class="padding"></div>
        <img class="avatar" src="user.png" alt="Avatar" draggable="false"/>
        <div class="username">@Model.Author</div>
        <div class="date" data-date="@_longDate">@_date</div>
    }
    else
    {
        <div class="content-only-date">@_shortDate</div>
    }

    <div class="message-content">
        @if (Model.Embed is not null)
        {
            <MessageEmbed Model="Model.Embed"/>
        }
        <div style="white-space: pre-wrap">@Model.Content</div>
    </div>
</div>

@code {

    [Parameter]
    public required MessageModel Model { get; set; }

    private string? _date;
    private string? _longDate;
    private string? _shortDate;

    protected override void OnInitialized()
    {
        _date = TimeStampConverter(Model.Timestamp, DateFormatMode.Default);
        _longDate = TimeStampConverter(Model.Timestamp, DateFormatMode.Long);
        _shortDate = TimeStampConverter(Model.Timestamp, DateFormatMode.Short);
    }

    private static string TimeStampConverter(DateTimeOffset dateTimeOffset, DateFormatMode formatMode)
    {
        var format = formatMode == DateFormatMode.Long ? "HH:mm:ss" : "HH:mm";
        if (formatMode == DateFormatMode.Short)
        {
            return dateTimeOffset.ToLocalTime().ToString(format);
        }

        var localTime = dateTimeOffset.ToLocalTime();

        if (localTime.Date == DateTime.Today)
        {
            return $"Today {localTime.ToString(format)}";
        }

        if (localTime.Date == DateTime.Today.AddDays(-1))
        {
            return $"Yesterday {localTime.ToString(format)}";
        }

        var fullFormat = formatMode == DateFormatMode.Long ? "dd-MM-yyyy HH:mm:ss" : "dd-MM-yyyy HH:mm";
        return localTime.ToString(fullFormat);
    }

    private enum DateFormatMode
    {
        Default,
        Short,
        Long
    }
}