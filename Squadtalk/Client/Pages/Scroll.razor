@page "/infinite-scrolling"
@using RestSharp
@using Squadtalk.Client.Shared
@using Squadtalk.Shared

<link rel="stylesheet" href="css/message.css" />

<div class="message-listbox">
    <InfiniteScrolling ItemsProvider="GetMessages">
        <ItemTemplate Context="message">
                
            @if (true)
            {
                <div class="message-container">
                    <img class="avatar message-element" src="user.png" alt="Avatar"/>
                    <div>
                        <div>
                            <span class="username message-element">@message.Author.Username</span>
                            <span class="date">@GetFormattedTimestamp(message.Timestamp)</span>
                        </div>
                        <div>@message.Content</div>
                    </div>
                </div>
            }
            else
            {
                <div class="content-only">@message.Content</div>
            }

        </ItemTemplate>

        <LoadingTemplate>
            <div><span class="oi oi-reload spinner"></span> Loading more items...</div>
        </LoadingTemplate>
    </InfiniteScrolling>
</div>


@code
{
    private RestClient _restClient = new("http://squadtalk.ddns.net");

    async Task<IEnumerable<MessageDto>> GetMessages(InfiniteScrollingItemsProviderRequest request)
    {
        var restRequest = new RestRequest($"api/Message?page=0&offset={request.StartIndex}");
        var response = await _restClient.GetAsync<List<MessageDto>>(restRequest);

        return response!;
    }

    private static string GetFormattedTimestamp(DateTimeOffset dateTime)
    {
        if (dateTime.Date == DateTime.Today)
        {
            return $"Today {dateTime:HH:mm}";
        }

        if (dateTime.Date == DateTime.Today.AddDays(-1))
        {
            return $"Yesterday {dateTime:HH:mm}";
        }

        return dateTime.ToString("dd-MM-yyyy HH:mm");
    }
}
