@page "/app"
@using Blazored.LocalStorage
@using RestSharp
@using Squadtalk.Client.Models
@using Squadtalk.Client.Services
@using UserStatus = Squadtalk.Client.Models.UserStatus

@implements IAsyncDisposable

<PageTitle>Squadtalk</PageTitle>

<link rel="stylesheet" href="css/messageTemplate.css" />
<link rel="stylesheet" href="css/uploadinfo.css" />

<div class="background">
    
    <UsersList @ref="_users">
        <Template>
            <UserTemplate Model="context" />
        </Template>
    </UsersList>
    <UserStatus Username="User" ConnectionStatus="@SignalRService.ConnectionStatus"/>
    
    <div class="chat-area">
        <div class="message-listbox">
            <InfiniteScrolling ItemsProvider="GetMessagePage" @ref="_scrollRef">
                <ItemTemplate>
                    <MessageTemplate Model="context"/>
                </ItemTemplate>

                <LoadingTemplate>
                    <div>
                        <span class="oi oi-reload spinner"></span> Loading more items...
                    </div>
                </LoadingTemplate>
            </InfiniteScrolling>
        </div>
        
        <TextBox SignalRService="SignalRService" />
    </div>
</div>

<div id="overlay">Drop your file here!</div>

@inject JwtService JwtService
@inject SignalRService SignalRService
@inject MessageService MessageService
@inject NavigationManager NavigationManager
@inject RestClient RestClient
@inject ILocalStorageService LocalStorageService
@inject AuthenticationStateProvider AuthenticationStateProvider

@code {
    
    private InfiniteScrolling<MessageModel> _scrollRef = null!;
    private UsersList _users = null!;

    protected override async Task OnInitializedAsync()
    {
        if (!JwtService.IsTokenSet)
        {
            NavigationManager.NavigateTo("");
            return;
        }
        
        var result = await SignalRService.ConnectAsync();
        Console.WriteLine(result);
        
        MessageService.MessageReceived = MessageServiceMessageReceived;
        JwtService.UnableToRefreshToken = () => NavigationManager.NavigateTo("/");
        SignalRService.StatusChanged += StateHasChanged;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender) return;
        
        _users.AddUser(new UserModel
        {
            Username = "User",
            Status = UserStatus.Away,
            AvatarUrl = "user.png",
            Color = "blue"
        });
        
        _users.AddUser(new UserModel
        {
            Username = "User",
            Status = UserStatus.DoNotDisturb,
            AvatarUrl = "user.png",
            Color = "bdw"
        });
        
        _users.AddUser(new UserModel
        {
            Username = "User",
            Status = UserStatus.Online,
            AvatarUrl = "user.png",
            Color = "#f2a203"
        });
        
        _users.AddUser(new UserModel
        {
            Username = "User",
            Status = UserStatus.Offline,
            AvatarUrl = "user.png",
            Color = "#f2a203"
        });
    }

    private void MessageServiceMessageReceived(MessageModel model)
    {
        _scrollRef.InsertItem(0, model);
    }

    private async Task<IEnumerable<MessageModel>> GetMessagePage(InfiniteScrollingItemsProviderRequest request)
    {
        var page = await MessageService.GetMessagePageAsync(request.StartIndex);
        if (_scrollRef.Items.Count > 0 && page.Count > 0)
        {
            MessageService.CheckIfIsFirst(_scrollRef.Items[^1], page[0]);
        }

        return page;
    }

    private async Task LogOut(bool invalidateAllSessions = false)
    {
        var request = new RestRequest("api/user/logout", Method.Post);
        var currentRefreshToken = await LocalStorageService.GetItemAsync<string>("Token");

        request.AddHeader("Authorization", $"Bearer {JwtService.Token}");

        if (invalidateAllSessions)
        {
            request.AddQueryParameter("invalidateAllSessions", invalidateAllSessions);
        }
        else
        {
            request.AddBody($"\"{currentRefreshToken}\"");
        }
        
        await RestClient.ExecuteAsync(request);

        await LocalStorageService.RemoveItemAsync("Username");
        JwtService.ClearToken();
        
        NavigationManager.NavigateTo("/");
    }

    public async ValueTask DisposeAsync()
    {
        await JwtService.CancelPendingRequests();

        await SignalRService.DisposeAsync();
        await _scrollRef.DisposeAsync();
    }
}
