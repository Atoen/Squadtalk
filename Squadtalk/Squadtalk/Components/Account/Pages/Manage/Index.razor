@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Squadtalk.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Profile</PageTitle>

<h3>Profile</h3>

<StatusMessage Message="@_message"/>
<div class="row">
    <div class="col-md-6">
        <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.NewUsername" class="form-control" placeholder="Enter new username." />
                <label for="username" class="form-label">Username</label>
                <ValidationMessage For="() => Input.NewUsername" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
        </EditForm>
    </div>
</div>

@code {
    private string? _message;
    private ApplicationUser _user = default!;
    private string? _username;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        _user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        _username = await UserManager.GetUserNameAsync(_user);

        Input.NewUsername ??= _username;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.NewUsername is null || Input.NewUsername == _username)
        {
            _message = "Your username is unchanged";
            return;
        }

        var setUsernameResult = await UserManager.SetUserNameAsync(_user, Input.NewUsername);
        if (!setUsernameResult.Succeeded)
        {
            RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to change username.", HttpContext);
        }

        await SignInManager.RefreshSignInAsync(_user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(30, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 4)]
        [Display(Name = "New Username")]
        public string? NewUsername { get; set; }
    }
}
