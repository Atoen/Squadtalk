@using Squadtalk.Client.Services
@using Squadtalk.Client.Extensions
@using Shared.Services
@using System.Diagnostics.CodeAnalysis

<div class="input-box" style="@GetStyle()">
    <div class="grow-wrap">
        <textarea rows="1" placeholder="@_placeholder"
            @bind="_userMessage"
            @onkeydown="TextareaCallback"
            @onkeydown:preventDefault="@_preventDefaultOnKeyDown"
            id="textBox"
            disabled="@(!SignalRService.Connected)">
        </textarea>
    </div>
    
    <label class="add-button" for="file-picker">
        <svg id="Layer_1" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" data-name="Layer 1">
            <path d="m12 0a12 12 0 1 0 12 12 12.013 12.013 0 0 0 -12-12zm0 22a10 10 0 1 1 10-10 10.011 10.011 0 0 1 -10 10zm5-10a1 1 0 0 1 -1 1h-3v3a1 1 0 0 1 -2 0v-3h-3a1 1 0 0 1 0-2h3v-3a1 1 0 0 1 2 0v3h3a1 1 0 0 1 1 1z"/>
        </svg>
    </label>

    <label class="send-button">
        <svg xmlns="http://www.w3.org/2000/svg" id="Layer_2" data-name="Layer 1" viewBox="0 0 24 24">
            <path d="m.172,3.708C-.216,2.646.076,1.47.917.713,1.756-.041,2.951-.211,3.965.282l18.09,8.444c.97.454,1.664,1.283,1.945,2.273H4.048L.229,3.835c-.021-.041-.04-.084-.057-.127Zm3.89,9.292L.309,20.175c-.021.04-.039.08-.054.122-.387,1.063-.092,2.237.749,2.993.521.467,1.179.708,1.841.708.409,0,.819-.092,1.201-.279l18.011-8.438c.973-.456,1.666-1.288,1.945-2.28H4.062Z"/>
        </svg>
    </label>
    
    <InputFile class="d-none" id="file-picker"></InputFile>
</div>

@implements IAsyncDisposable

@inject IMessageService MessageService
@inject IJSRuntime JSRuntime
@inject ICommunicationManager CommunicationManager
@inject ISignalrService SignalRService
@inject ILogger<InputBox> Logger

@code {
    private const string DisabledStyle = "pointer-events: none; opacity: 0.4;";
    private const string DefaultPlaceholder = "Type message";
    
    private string? _placeholder;
    private string? _userMessage;
    private bool _preventDefaultOnKeyDown;
    
    private IJSObjectReference? _jsModule;

    protected override void OnInitialized()
    {
        Logger.LogInformation("Initialized");
        
        _placeholder = SignalRService.ConnectionStatus;
        SignalRService.ConnectionStatusChanged += OnSignalRServiceOnConnectionStatusChanged;
    }

    private Task OnSignalRServiceOnConnectionStatusChanged(string status)
    {
        _placeholder = SignalRService.Connected ? DefaultPlaceholder : status;
        StateHasChanged();

        return Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        _jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "../Components/InputBox.razor.js");
        await _jsModule.InvokeVoidAsync("initialize");
    }
    
    private string GetStyle()
    {
        return SignalRService.Connected ? string.Empty : DisabledStyle;
    }

    private async Task TextareaCallback(KeyboardEventArgs e)
    {
        _preventDefaultOnKeyDown = false;

        if (e is { Key: "Enter", ShiftKey: false })
        {
            await SendMessage();
        }
    }
    
    private async Task SendMessage()
    {
        _preventDefaultOnKeyDown = true;

        var channel = CommunicationManager.CurrentChannel;
        if (channel.IsFake())
        {
            await CommunicationManager.CreateRealDirectMessageChannel(channel);
        }

        var message = await _jsModule!.InvokeAsync<string>("getAndClearMessage");
        Logger.LogInformation("Sending message: {Content} to channel: {Channel}", message, CommunicationManager.CurrentChannel.Id);

        if (!string.IsNullOrWhiteSpace(message))
        {
           await SignalRService.SendMessageAsync(message, CommunicationManager.CurrentChannel.Id);
        }
    }

    public async ValueTask DisposeAsync()
    {
        await _jsModule.TryDisposeAsync();
        SignalRService.ConnectionStatusChanged -= OnSignalRServiceOnConnectionStatusChanged;
    }
}