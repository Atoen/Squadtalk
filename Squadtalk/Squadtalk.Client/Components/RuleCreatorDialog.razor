@using Squadtalk.Client.Data

<div class="row">
    <div class="d-flex flex-row align-items-center mb-2">
        <span>Attacker:</span>
        <div class="color-box mx-2" style="background: @_firstChoice;"></div>
        <Dropdown>
            <DropdownToggleButton Color="ButtonColor.Secondary">
                @_firstChoice
            </DropdownToggleButton>
            <DropdownMenu>
                @foreach (var color in Rule.AvailableColors)
                {
                    <DropdownItem Type="ButtonType.Button" @onclick="() => _firstChoice = color">
                        <div class="d-flex">
                            <div class="color-box mx-2" style="background: @color"></div>
                            @color
                        </div>
                    </DropdownItem>
                }
            </DropdownMenu>
        </Dropdown>
    </div>
    
    <div class="d-flex flex-row align-items-center">
        <span>Attacked:</span>
        <div class="color-box mx-2" style="background: @_secondChoice;"></div>
        <Dropdown>
            <DropdownToggleButton Color="ButtonColor.Secondary">
                @_secondChoice
            </DropdownToggleButton>
            <DropdownMenu>
                @foreach (var color in Rule.AvailableColors)
                {
                    <DropdownItem Type="ButtonType.Button" @onclick="() => _secondChoice = color">
                        <div class="d-flex">
                            <div class="color-box mx-2" style="background: @color"></div>
                            @color
                        </div>
                    </DropdownItem>
                }
            </DropdownMenu>
        </Dropdown>
    </div>
</div>

<div class="mt-2 float-end">
    <Button Color="ButtonColor.Danger" @onclick="Close">Cancel</Button>
    <Button Color="ButtonColor.Success" @onclick="AddRule" Disabled="@RuleIsInvalid">Add</Button>
</div>


@code {
    private const string FirstPlaceholder = "Select attacker";
    private const string SecondPlaceholder = "Select attacker";
    
    private string _firstChoice = FirstPlaceholder;
    private string _secondChoice = SecondPlaceholder;

    private bool RuleIsInvalid => _firstChoice == FirstPlaceholder ||
                                _secondChoice == SecondPlaceholder ||
                                _firstChoice == _secondChoice;

    [Parameter] public EventCallback CancelCallback { get; set; }
    [Parameter] public EventCallback<Rule> AddRuleCallback { get; set; }

    private void ClearSelection()
    {
        _firstChoice = FirstPlaceholder;
        _secondChoice = SecondPlaceholder;
    }

    private Task Close()
    {
        ClearSelection();
        return CancelCallback.InvokeAsync();
    }

    private Task AddRule()
    {
        var rule = new Rule(_firstChoice, _secondChoice);
        ClearSelection();
        
        return AddRuleCallback.InvokeAsync(rule);
    }
}