@page "/Messages/Chat"
@using Microsoft.AspNetCore.Authorization
@using Shared.Communication
@using Shared.Data

@implements IDisposable

@attribute [Authorize]

<PageTitle>Squadtalk | @ChannelName</PageTitle>

<ConfirmDialog @ref="_dialog" />

<div class="header">
    @if (!IsGlobalChat)
    {
        <img alt="@ChannelName Avatar" src="User.png" class="avatar" />

        if (VoiceChatService.CurrentVoiceCall is { } callModel)
        {
            <svg fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg" class="end-call-icon"
                 @onclick="() => EndVoiceCall(callModel)">
                <path d="M10 6.00001C13.3317 5.99572 15.5858 7.2756 17.154 8.65976C17.8139 9.2422 18.116 10.1179 17.9594 10.94L17.8015 11.7692C17.6535 12.5461 16.9272 13.0679 16.1042 12.9884L14.4666 12.8302C13.753 12.7613 13.2241 12.2401 13 11.5001C12.6957 10.4953 12.5 9.75009 12.5 9.75009C11.7522 9.44357 11.0138 9.25005 10 9.25005C8.98623 9.25005 8.26225 9.46492 7.5 9.75009C7.5 9.75009 7.29566 10.496 7 11.5001C6.80244 12.171 6.49595 12.7567 5.79708 12.8269L4.16895 12.9905C3.35656 13.0722 2.57765 12.5555 2.3467 11.7818L2.09921 10.9526C1.85286 10.1273 2.0727 9.25869 2.67633 8.67245C4.10141 7.28843 6.67315 6.00433 10 6.00001ZM13.4754 9.52689L13.5008 9.62157C13.5232 9.70474 13.5565 9.82664 13.5991 9.97972C13.6846 10.2861 13.8075 10.7163 13.9571 11.2102C14.0936 11.661 14.3462 11.8139 14.5628 11.8348L16.2004 11.993C16.5457 12.0264 16.7746 11.816 16.8191 11.5821L16.9771 10.7529C17.0653 10.2894 16.8963 9.76613 16.4923 9.40948C15.0673 8.1517 13.0404 6.9961 10.0013 7.00001C6.92594 7.00401 4.60599 8.19238 3.37303 9.38982C3.04458 9.70881 2.9145 10.1877 3.05744 10.6666L3.30493 11.4957C3.39647 11.8024 3.72575 12.03 4.06896 11.9955L5.69709 11.8319C5.73551 11.8281 5.74859 11.8203 5.7511 11.8189C5.75521 11.8165 5.77275 11.8057 5.80155 11.7692C5.8711 11.6811 5.9536 11.5135 6.04073 11.2176C6.18728 10.7199 6.31122 10.2861 6.39847 9.97694C6.44208 9.82241 6.47648 9.69914 6.49992 9.61474L6.52663 9.51827C6.62916 9.15132 6.98467 8.89552 7.14961 8.81349C7.96877 8.50703 8.81921 8.25005 10 8.25005C11.1653 8.25005 12.0327 8.47779 12.8793 8.8248C13.0313 8.88736 13.3617 9.10921 13.4672 9.4961L13.4691 9.50315L13.4754 9.52689Z" />
            </svg>
        }
        else
        {
            <svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="call-icon"
                 @onclick="StartVoiceCall">
                <path d="M348.73,450.06a198.63,198.63,0,0,1-46.4-5.85c-52.43-12.65-106.42-44.74-152-90.36s-77.71-99.62-90.36-152C46.65,146.75,56.15,99.61,86.69,69.07l8.72-8.72a42.2,42.2,0,0,1,59.62,0l50.11,50.1a42.18,42.18,0,0,1,0,59.62l-29.6,29.59c14.19,24.9,33.49,49.82,56.3,72.63s47.75,42.12,72.64,56.31L334.07,299a42.15,42.15,0,0,1,59.62,0l50.1,50.1a42.16,42.16,0,0,1,0,59.61l-8.73,8.72C413.53,439,383.73,450.06,348.73,450.06ZM125.22,78a12,12,0,0,0-8.59,3.56l-8.73,8.72c-22.87,22.87-29.55,60-18.81,104.49,11.37,47.13,40.64,96.1,82.41,137.86s90.73,71,137.87,82.41c44.5,10.74,81.61,4.06,104.48-18.81l8.72-8.72a12.16,12.16,0,0,0,0-17.19l-50.09-50.1a12.16,12.16,0,0,0-17.19,0l-37.51,37.51a15,15,0,0,1-17.5,2.72c-30.75-15.9-61.75-39.05-89.65-66.95s-51-58.88-66.94-89.63a15,15,0,0,1,2.71-17.5l37.52-37.51a12.16,12.16,0,0,0,0-17.19l-50.1-50.11A12.07,12.07,0,0,0,125.22,78Z"/><path d="M364.75,269.73a15,15,0,0,1-15-15,99.37,99.37,0,0,0-99.25-99.26,15,15,0,0,1,0-30c71.27,0,129.25,58,129.25,129.26A15,15,0,0,1,364.75,269.73Z"/><path d="M428.15,269.73a15,15,0,0,1-15-15c0-89.69-73-162.66-162.65-162.66a15,15,0,0,1,0-30c106.23,0,192.65,86.43,192.65,192.66A15,15,0,0,1,428.15,269.73Z"/>
            </svg>
        }
    }
    <span class="channel-name">@ChannelName</span>
</div>


<div class="chat-container">
    @if (VoiceChatService.CurrentVoiceCall is { } call)
    {
        <CallInfo Model="call"/>
    }
    <div class="message-listbox rounded my-1" id="listbox">
        <InfiniteScrolling>
            <ItemTemplate>
                <MessageTemplate Model="context"/>
            </ItemTemplate>
            <LoadingTemplate>
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </LoadingTemplate>
        </InfiniteScrolling>
    </div>

    <UploadInfo/>
    <InputBox/>
</div>

@inject ITextChatService TextChatService
@inject ToastService ToastService
@inject IFileTransferService FileTransferService
@inject NavigationManager NavigationManager
@inject IVoiceChatService VoiceChatService
@inject ILogger<Chat> Logger

@code {

    private ConfirmDialog _dialog = default!;

    private readonly ConfirmDialogOptions _options = new()
    {
        IsVerticallyCentered = true,
        Dismissable = true,
        YesButtonText = "Accept",
        YesButtonColor = ButtonColor.Success,
        NoButtonText = "Decline",
        NoButtonColor = ButtonColor.Danger,
        Size = DialogSize.Small
    };
    
    private string? ChannelName => TextChatService.CurrentChannel?.Name;
    private bool IsGlobalChat => TextChatService.CurrentChannel == GroupChat.GlobalChat;
    
    protected override void OnInitialized()
    {
        if (TextChatService.CurrentChannel is null)
        {
            NavigationManager.NavigateTo("/Messages");
        }
        
        VoiceChatService.CallOfferIncoming += ShowCallPopup;
        VoiceChatService.StateHasChanged += StateHasChanged;
    }
    
    private async Task ShowCallPopup(UserModel caller, CallOfferId id)
    {
        var accept = await _dialog.ShowAsync($"Incoming call from {caller.Username}", 
            "Accept call?", _options);

        if (accept)
        {
            await VoiceChatService.AcceptCallAsync(id);
        }
        else
        {
            await VoiceChatService.DeclineCallAsync(id);
        }
    }

    private Task StartVoiceCall()
    {
        Logger.LogInformation("Starting call");
        
        // var invitedIds = TextChatService.CurrentChannel switch
        // {
        //     DirectMessageChannel dm => [dm.Other],
        //     GroupChat groupChat => groupChat.Others,
        //     _ => null
        // };

        var other = ((DirectMessageChannel) TextChatService.CurrentChannel!).Other;
        return VoiceChatService.StartCallAsync(other);
    }

    private Task EndVoiceCall(VoiceCallModel callModel)
    {
        return VoiceChatService.EndCallAsync((CallId) callModel.Id);
    }
    
    public void Dispose()
    {
        VoiceChatService.CallOfferIncoming -= ShowCallPopup;
        VoiceChatService.StateHasChanged -= StateHasChanged;
        
        if (FileTransferService.UploadChannel is not { } channel) return;

        var toast = new ToastMessage(ToastType.Success, $"Your upload to {channel.Name} is still in progress.");
        ToastService.Notify(toast);
    }
}