@page "/Voice"
@using Microsoft.AspNetCore.Authorization
@using Squadtalk.Client.Extensions
@using Squadtalk.Client.Data
<h3>Voice</h3>

@implements IAsyncDisposable
@attribute [Authorize]

<Button @onclick="StartStream" Color="ButtonColor.Primary">Start stream</Button>

@inject IVoiceChatService VoiceChatService
@inject IJSRuntime JSRuntime
@inject ILogger<Voice> Logger

@code {
    
    private bool _started;
    private IJSObjectReference _jsModule = default!;
    private DotNetObjectReference<Voice> _dotNetObject = default!;
    private readonly AsyncQueue<string> _queue = new();
    
    protected override Task OnInitializedAsync()
    {
        _dotNetObject = DotNetObjectReference.Create(this);
        return VoiceChatService.ConnectAsync();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _jsModule = await JSRuntime.ImportAndInitModuleAsync("../js/VoiceChat.js", _dotNetObject, 64_000);
        }
    }

    private async Task StartStream()
    {
        await VoiceChatService.StartStreamAsync(_queue, CancellationToken.None);
    }
    

    [JSInvokable]
    public void MicDataCallback(string data) => _queue.Enqueue(data);

    public ValueTask DisposeAsync()
    {
        _dotNetObject.Dispose();
        return _jsModule.TryDisposeAsync();
    }
}